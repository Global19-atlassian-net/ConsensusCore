/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace ConsensusCore {

using System;
using System.Runtime.InteropServices;

public class IntervalS : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal IntervalS(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(IntervalS obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~IntervalS() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          ConsensusCorePINVOKE.delete_IntervalS(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public IntervalS() : this(ConsensusCorePINVOKE.new_IntervalS__SWIG_0(), true) {
  }

  public IntervalS(int t, int u) : this(ConsensusCorePINVOKE.new_IntervalS__SWIG_1(t, u), true) {
  }

  public IntervalS(IntervalS p) : this(ConsensusCorePINVOKE.new_IntervalS__SWIG_2(IntervalS.getCPtr(p)), true) {
    if (ConsensusCorePINVOKE.SWIGPendingException.Pending) throw ConsensusCorePINVOKE.SWIGPendingException.Retrieve();
  }

  public int first {
    set {
      ConsensusCorePINVOKE.IntervalS_first_set(swigCPtr, value);
    } 
    get {
      int ret = ConsensusCorePINVOKE.IntervalS_first_get(swigCPtr);
      return ret;
    } 
  }

  public int second {
    set {
      ConsensusCorePINVOKE.IntervalS_second_set(swigCPtr, value);
    } 
    get {
      int ret = ConsensusCorePINVOKE.IntervalS_second_get(swigCPtr);
      return ret;
    } 
  }

}

}
